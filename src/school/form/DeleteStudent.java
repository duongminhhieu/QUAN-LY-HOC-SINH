/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package school.form;

import java.awt.Component;
import java.awt.Image;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import school.Student;

/**
 *
 * @author ASUS
 */
public class DeleteStudent extends javax.swing.JPanel {

    /**
     * Creates new form DeleteStudent
     */
    public DeleteStudent() {
        initComponents();
        init();
        try {
            readFile();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ListStudent.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    List<Student> list = null;

    private void init() {

        table.fixTable(jScrollPane1);
        resizeColumnWidth(table);

        table.setAutoCreateRowSorter(true);
        table.setFillsViewportHeight(true);
    }

    public void resizeColumnWidth(JTable table) {
        final TableColumnModel columnModel = table.getColumnModel();
        for (int column = 0; column < table.getColumnCount(); column++) {
            int width = 15; // Min width
            for (int row = 0; row < table.getRowCount(); row++) {
                TableCellRenderer renderer = table.getCellRenderer(row, column);
                Component comp = table.prepareRenderer(renderer, row, column);
                width = Math.max(comp.getPreferredSize().width + 1, width);
            }
            if (width > 300) {
                width = 300;
            }
            columnModel.getColumn(column).setPreferredWidth(width);
        }
    }

    class myTableCellRenderer implements TableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            table.setRowHeight(60);
            return (Component) value;
        }

    }

    private void readFile() throws ClassNotFoundException {
        //this part deserializes the list from file, and then iterates over its members

        try {
            ObjectInputStream ois = new ObjectInputStream(new FileInputStream("students.bin"));
            list = (List) ois.readObject();
            int i = 1;
            for (Student st : list) {
                addDataTable(st, i);
                i += 1;
//                System.out.println(st.getId());
//                System.out.println(st.getName());
//                System.out.println(st.getScore());
//                System.out.println(st.getImage());
//                System.out.println(st.getAddress());
//                System.out.println(st.getDescription());
            }
        } catch (IOException ex) {
            Logger.getLogger(ListStudent.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void addDataTable(Student st, int i) {
        JLabel imageLabel = new JLabel();
        ImageIcon imageicon = new ImageIcon(st.getImage());
        Image imageic = imageicon.getImage().getScaledInstance(150, 250, Image.SCALE_SMOOTH);
        imageLabel.setIcon(new ImageIcon(imageic));
        table.getColumn("Hình ảnh").setCellRenderer(new myTableCellRenderer());
        table.addRow(new Object[]{st.getId(), st.getName(), st.getScore(), st.getAddress(), st.getDescription(), imageLabel});
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        roundPanel1 = new swing.RoundPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new swing.Table();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        ButtonDelete = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        roundPanel1.setBackground(new java.awt.Color(255, 255, 255));
        roundPanel1.setRound(10);

        table.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MHS", "TenHS", "Diem", "Địa chỉ", "Ghi chú", "Hình ảnh"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        table.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        table.setRowHeight(80);
        table.setShowGrid(true);
        jScrollPane1.setViewportView(table);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        jLabel2.setText("*nháy vào header để sắp xếp");

        javax.swing.GroupLayout roundPanel1Layout = new javax.swing.GroupLayout(roundPanel1);
        roundPanel1.setLayout(roundPanel1Layout);
        roundPanel1Layout.setHorizontalGroup(
            roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roundPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 769, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, roundPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addGap(8, 8, 8)))
                .addContainerGap())
        );
        roundPanel1Layout.setVerticalGroup(
            roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roundPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        add(roundPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 78, -1, -1));

        jLabel1.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 102, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("XÓA HỌC SINH");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(257, 29, 264, 37));

        jLabel3.setText("Số lượng:");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(589, 9, -1, -1));
        add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(645, 6, -1, -1));

        ButtonDelete.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        ButtonDelete.setForeground(new java.awt.Color(255, 51, 51));
        ButtonDelete.setText("XÓA");
        ButtonDelete.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ButtonDelete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ButtonDeleteMouseClicked(evt);
            }
        });
        ButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonDeleteActionPerformed(evt);
            }
        });
        add(ButtonDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(589, 40, 140, 32));
    }// </editor-fold>//GEN-END:initComponents

    private void ButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonDeleteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ButtonDeleteActionPerformed

    private void ButtonDeleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ButtonDeleteMouseClicked
        // TODO add your handling code here:
        DefaultTableModel tableModel = (DefaultTableModel) table.getModel();

        if (table.getSelectedRowCount() == 1) {

            int input = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn xóa ?");

            if (input == 0) {
                int column = 0;
                int row = table.getSelectedRow();
                String value = table.getModel().getValueAt(row, column).toString();
                try {
                    list.remove(findStudent(list, value));
                    try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("students.bin"))) {
                        oos.writeObject(list);
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    tableModel.removeRow(table.getSelectedRow());
                    JOptionPane.showMessageDialog(this, "Xóa thành công!");
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "Xóa KHÔNG thành công!");

                }

            }
        } else {
            if (table.getRowCount() == 0) {
                JOptionPane.showMessageDialog(this, "Table is empty!");
            } else {
                // delete mult table
            }
        }
    }//GEN-LAST:event_ButtonDeleteMouseClicked

    private int findStudent(List<Student> list, String id) {

        for (int i = 0; i < list.size(); i++) {
            if (list.get(i).getId().equals(id)) {
                return i;
            }
        }
        return -1;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonDelete;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private swing.RoundPanel roundPanel1;
    private swing.Table table;
    // End of variables declaration//GEN-END:variables
}
